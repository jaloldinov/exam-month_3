// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: order_product.proto

package order_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderProductServiceClient is the client API for OrderProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderProductServiceClient interface {
	Create(ctx context.Context, in *OrderProductCreateReq, opts ...grpc.CallOption) (*OrderProductCreateResp, error)
	GetList(ctx context.Context, in *OrderProductGetListReq, opts ...grpc.CallOption) (*OrderProductGetListResp, error)
	GetById(ctx context.Context, in *OrderProductIdReq, opts ...grpc.CallOption) (*OrderProduct, error)
	Update(ctx context.Context, in *OrderProductUpdateReq, opts ...grpc.CallOption) (*OrderProductUpdateResp, error)
	Delete(ctx context.Context, in *OrderProductIdReq, opts ...grpc.CallOption) (*OrderProductDeleteResp, error)
}

type orderProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderProductServiceClient(cc grpc.ClientConnInterface) OrderProductServiceClient {
	return &orderProductServiceClient{cc}
}

func (c *orderProductServiceClient) Create(ctx context.Context, in *OrderProductCreateReq, opts ...grpc.CallOption) (*OrderProductCreateResp, error) {
	out := new(OrderProductCreateResp)
	err := c.cc.Invoke(ctx, "/order_service.OrderProductService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductServiceClient) GetList(ctx context.Context, in *OrderProductGetListReq, opts ...grpc.CallOption) (*OrderProductGetListResp, error) {
	out := new(OrderProductGetListResp)
	err := c.cc.Invoke(ctx, "/order_service.OrderProductService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductServiceClient) GetById(ctx context.Context, in *OrderProductIdReq, opts ...grpc.CallOption) (*OrderProduct, error) {
	out := new(OrderProduct)
	err := c.cc.Invoke(ctx, "/order_service.OrderProductService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductServiceClient) Update(ctx context.Context, in *OrderProductUpdateReq, opts ...grpc.CallOption) (*OrderProductUpdateResp, error) {
	out := new(OrderProductUpdateResp)
	err := c.cc.Invoke(ctx, "/order_service.OrderProductService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductServiceClient) Delete(ctx context.Context, in *OrderProductIdReq, opts ...grpc.CallOption) (*OrderProductDeleteResp, error) {
	out := new(OrderProductDeleteResp)
	err := c.cc.Invoke(ctx, "/order_service.OrderProductService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderProductServiceServer is the server API for OrderProductService service.
// All implementations must embed UnimplementedOrderProductServiceServer
// for forward compatibility
type OrderProductServiceServer interface {
	Create(context.Context, *OrderProductCreateReq) (*OrderProductCreateResp, error)
	GetList(context.Context, *OrderProductGetListReq) (*OrderProductGetListResp, error)
	GetById(context.Context, *OrderProductIdReq) (*OrderProduct, error)
	Update(context.Context, *OrderProductUpdateReq) (*OrderProductUpdateResp, error)
	Delete(context.Context, *OrderProductIdReq) (*OrderProductDeleteResp, error)
	mustEmbedUnimplementedOrderProductServiceServer()
}

// UnimplementedOrderProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderProductServiceServer struct {
}

func (UnimplementedOrderProductServiceServer) Create(context.Context, *OrderProductCreateReq) (*OrderProductCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderProductServiceServer) GetList(context.Context, *OrderProductGetListReq) (*OrderProductGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedOrderProductServiceServer) GetById(context.Context, *OrderProductIdReq) (*OrderProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedOrderProductServiceServer) Update(context.Context, *OrderProductUpdateReq) (*OrderProductUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderProductServiceServer) Delete(context.Context, *OrderProductIdReq) (*OrderProductDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrderProductServiceServer) mustEmbedUnimplementedOrderProductServiceServer() {}

// UnsafeOrderProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderProductServiceServer will
// result in compilation errors.
type UnsafeOrderProductServiceServer interface {
	mustEmbedUnimplementedOrderProductServiceServer()
}

func RegisterOrderProductServiceServer(s grpc.ServiceRegistrar, srv OrderProductServiceServer) {
	s.RegisterService(&OrderProductService_ServiceDesc, srv)
}

func _OrderProductService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderProductCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderProductService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductServiceServer).Create(ctx, req.(*OrderProductCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProductService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderProductGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderProductService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductServiceServer).GetList(ctx, req.(*OrderProductGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProductService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderProductService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductServiceServer).GetById(ctx, req.(*OrderProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProductService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderProductUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderProductService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductServiceServer).Update(ctx, req.(*OrderProductUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProductService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderProductService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductServiceServer).Delete(ctx, req.(*OrderProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderProductService_ServiceDesc is the grpc.ServiceDesc for OrderProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.OrderProductService",
	HandlerType: (*OrderProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderProductService_Create_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _OrderProductService_GetList_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _OrderProductService_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderProductService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrderProductService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_product.proto",
}
